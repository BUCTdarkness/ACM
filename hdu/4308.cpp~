#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<algorithm>
#include<cstdlib>
#include<string>
#include<queue>
#include<stack>
using namespace std;
#define CLR(A) memset(A,0,sizeof(A))
const int MAX=5001;
char mp[MAX][MAX],vis[MAX][MAX];
int ex,ey,sx,sy,n,m,cost,cnt=0;
int dir[4][2]={1,0,-1,0,0,1,0,-1};
struct Pos{int x,y;} p[1000];
struct Node{
	int x,y,v;
	friend bool operator < (Node a,Node b){return a.v>b.v;}
};
int bfs(){
	priority_queue<Node> q;
	Node cur,tmp;
	for(int i=0;i<n;i++)
	for(int j=0;j<m;j++) vis[i][j]=0;
	cur.x=sx;cur.y=sy;cur.v=0;
	q.push(cur);vis[cur.x][cur.y]=1;
	while(!q.empty()){
		cur=q.top();q.pop();
		if(cur.x==ex&&cur.y==ey) return cur.v-cost;
		for(int i=0;i<4;i++){
			tmp.x=cur.x+dir[i][0];
			tmp.y=cur.y+dir[i][1];
			if(tmp.x<0 || tmp.x>=n || tmp.y<0 || tmp.y>=m)  continue;  
			if(mp[tmp.x][tmp.y]=='#'||vis[tmp.x][tmp.y]) continue;
			if(mp[tmp.x][tmp.y]=='*'){
				tmp.v+=cost;
				q.push(tmp);
				vis[tmp.x][tmp.y]=1;
			}
			else if(mp[tmp.x][tmp.y]=='P'){
				if(vis[tmp.x][tmp.y]) continue;
				for(int l=0;l<cnt;l++){
					tmp.x=p[l].x;tmp.y=p[l].y;
					tmp.v=cur.v;
					q.push(tmp);
					vis[tmp.x][tmp.y]=1;
				}
			}
		}
	}
	return -1;
}
int main(){
	while(~scanf("%d%d%d",&n,&m,&cost)){
		cnt=0;
		for(int i=0;i<n;i++){
			scanf("%s",mp[i]);
			for(int l=0;mp[i][l];l++){
				if(mp[i][l]=='Y'){sx=i;sy=l;}
				else if(mp[i][l]=='C'){ex=i;ey=l;mp[ex][ey]='*';}
				else if(mp[i][l]=='P'){
					p[cnt].x=i;p[cnt].y=l;cnt++;
				}
			}
		}
		int ret=bfs();
    	if(ret==-1) printf("Damn teoy!\n");  
        else        printf("%d\n",ret);  
	}
	return 0;
}

